# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid=None, name=None, repository_url=None):  # noqa: E501
        """Project - a model defined in OpenAPI

        :param uuid: The uuid of this Project.  # noqa: E501
        :type uuid: str
        :param name: The name of this Project.  # noqa: E501
        :type name: str
        :param repository_url: The repository_url of this Project.  # noqa: E501
        :type repository_url: str
        """
        self.openapi_types = {
            'uuid': str,
            'name': str,
            'repository_url': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'repository_url': 'repository_url'
        }

        self._uuid = uuid
        self._name = name
        self._repository_url = repository_url

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this Project.


        :return: The uuid of this Project.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Project.


        :param uuid: The uuid of this Project.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def repository_url(self):
        """Gets the repository_url of this Project.


        :return: The repository_url of this Project.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this Project.


        :param repository_url: The repository_url of this Project.
        :type repository_url: str
        """

        self._repository_url = repository_url
